#!/usr/bin/env node
/**
 *  @file       job-utility.js
 *              Utility to inspect and manipulate running jobs.
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *              Karen Batch, karen@kingsds.network
 *  @date       April 2019
 */

const process = require('process');

require('dcp-client').initSync();

const { base } = require('dcp/dcp-cli');
const { Connection } = require('dcp/protocol-v4');
const { DcpURL } = require('dcp/dcp-url');
const { get: getAccountKeystore } = require('dcp/wallet');

const getSchedulerConnection = (schedulerURL) =>
  new Connection(schedulerURL.resolve('DCPv4'));

/**
 * Uses dcp-cli to help manage operations.
 */
async function main() {
  const { argv } = base(
    'Inspect and manipulate running jobs on the command line.',
  )
    // FIXME(bryan-hoang): countJobs is not implemented currently.
    .command('countJobs', 'Count jobs.', {
      all: {
        describe: 'Count all jobs on the scheduler',
        type: 'boolean',
        default: false,
      },
    })
    // FIXME(bryan-hoang): countTasks is not implemented currently.
    .command(
      'countTasks <jobID>',
      'Count tasks belonging to the specified job.',
    )
    // FIXME(bryan-hoang): elapsedTime is not implemented currently.
    .command(
      'elapsedTime <jobID>',
      'Display how long each slice belonging to the specified job has been running.',
    )
    // FIXME(bryan-hoang): cancelJob is not implemented currently.
    .command(
      'cancelJob <jobID>',
      'Cancels the specified job, halting execution.',
    )
    // FIXME(bryan-hoang): cancelAllJobs is not implemented currently.
    .command('cancelAllJobs', 'Cancels all jobs')
    // FIXME(bryan-hoang): fetchJobReport is not implemented currently.
    .command(
      'fetchJobReport <jobID>',
      'Returns information and status of the specified job',
    )
    // FIXME(bryan-hoang): fetchSliceReport is not implemented currently.
    .command(
      'fetchSliceReport <jobID>',
      'Returns status and history of slices for a specified job',
    )
    .demandCommand(1, 'A command must be specified')
    .strict().argv;

  const command = argv._[0];
  const response = await sendRequest(command, argv);
  console.log(JSON.stringify(response, null, 2));
}

/**
 * Sends the request to the route specified. Manipulates the owner's jobs
 * accordingly.
 *
 * @param {string} command
 * @param {object} argv
 * @returns {Promise<object>}
 */
async function sendRequest(command, argv) {
  const accountKeystore = await getAccountKeystore();
  const schedulerURL = new DcpURL(argv.scheduler);
  const schedulerConnection = getSchedulerConnection(schedulerURL);

  let operation;
  switch (command) {
    case 'elapsedTime':
      operation = 'elapsedJobTime';
      break;
    default:
      operation = command;
  }

  let payload;
  switch (command) {
    case 'countJobs':
      payload = {
        all: argv.all,
      };

      break;
    case 'countTasks':
    case 'elapsedTime':
    case 'cancelJob':
    case 'fetchJobReport':
    case 'fetchSliceReport':
      payload = {
        jobID: argv.jobID,
      };

      break;
    default:
  }

  console.log(`Sending request ${command}...`);
  ({ payload } = await schedulerConnection.send(
    operation,
    {
      owner: accountKeystore.address,
      ...payload,
    },
    accountKeystore,
  ));

  return payload;
}

main()
  .catch((e) => {
    console.error('Failed to execute command:');
    console.error(e);
    process.exitCode = 1;
  })
  .finally(() => setImmediate(process.exit));
