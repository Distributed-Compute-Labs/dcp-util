#!/usr/bin/env node
/**
 * @file   job-utility.js - Utility to inspect and manipulate running jobs.
 *
 * @author Ryan Rossiter <ryan@kingsds.network>
 * @author Karen Batch <karen@kingsds.network>
 * @date   April 2019
 */

const process = require('process');
const assert = require('assert').strict;
const { green, red } = require('chalk');
const ora = require('ora');
const debug = require('debug');

const { init: initDCPClient } = require('dcp-client');

const log = debug('job-utility');

let base;
let Connection;
let getId;
let getAccountKeystore;
let schedulerURL;

let accountKeystore;
let accountAddress;
let idKeystore;
let idAddress;
let microserviceConnection;
/** @type {ora.Ora} */
let spinner = {};

/**
 * Uses cli to help manage sending requests to routes/operations.
 */
async function main() {
  ({ base } = require('dcp/cli'));
  ({ Connection } = require('dcp/protocol-v4'));
  ({ getId, get: getAccountKeystore } = require('dcp/wallet'));
  ({
    scheduler: { location: schedulerURL },
  } = require('dcp/dcp-config'));

  accountKeystore = await getAccountKeystore();
  accountAddress = String(accountKeystore.address);
  log('accountAddress:', accountAddress);
  idKeystore = await getId();
  idAddress = String(idKeystore.address);
  log('idAddress:', idAddress);
  const argv = await base(
    'Inspect and manipulate running jobs on the command line.',
  )
    .command(
      'cancelJob <jobAddress> <reason> [jobOwner]',
      'Cancels the specified job with the given reason, halting its execution. Can pass the jobOwner for authorization',
      (yargs) => {
        yargs
          .positional('jobAddress', {
            describe: 'The address of the job',
            type: 'string',
          })
          .positional('reason', {
            describe:
              'The reason for cancelling the job, which workers will see',
            type: 'string',
          })
          .positional('jobOwner', {
            describe: 'The identity address of the owner of the jobs',
            type: 'string',
            default: idAddress,
          });
      },
    )
    .command(
      'cancelAllJobs <reason> [paymentAccount]',
      'Cancels all jobs that an account is paying for with the given reason',
      (yargs) => {
        yargs
          .positional('reason', {
            describe:
              'The reason for cancelling the job, which workers will see',
            type: 'string',
          })
          .positional('paymentAccount', {
            describe:
              'The address of the account paying for the jobs to be canceled',
            type: 'string',
            default: accountAddress,
          });
      },
    )
    .command(
      'countJobs [jobOwner]',
      'Count jobs owned by an identity, or list all of them if jobOwner is omitted',
      (yargs) => {
        yargs.positional('jobOwner', {
          describe: 'The identity address of the owner of the jobs to count',
          type: 'string',
        });
      },
    )
    .command(
      'countSlices <jobAddress> [jobOwner]',
      "Count slices belonging to the specified job and optionally pass the job's owner (default to the current identity)",
      (yargs) => {
        yargs
          .positional('jobAddress', {
            describe: 'The address of the job',
            type: 'string',
          })
          .positional('jobOwner', {
            describe: 'The identity address of the owner of the jobs',
            type: 'string',
            default: idAddress,
          });
      },
    )
    .command(
      'elapsedJobTime <jobAddress>',
      'Display how long each slice belonging to the specified job has been running.',
      (yargs) => {
        yargs.positional('jobAddress', {
          describe: 'The address of the job',
          type: 'string',
        });
      },
    )
    .command(
      'fetchJobReport <jobAddress> [jobOwner]',
      'Returns information and status of the specified job. Can specify the owner of the job for authorization.',
      (yargs) => {
        yargs
          .positional('jobAddress', {
            describe: 'The address of the job',
            type: 'string',
          })
          .positional('jobOwner', {
            describe: 'The identity address of the owner of the jobs',
            type: 'string',
            default: idAddress,
          });
      },
    )
    .command(
      'fetchSliceReport <jobAddress> [jobOwner]',
      'Returns status and history of slices for a specified job. Can specify the owner of the job for authorization.',
      (yargs) => {
        yargs
          .positional('jobAddress', {
            describe: 'The address of the job',
            type: 'string',
          })
          .positional('jobOwner', {
            describe: 'The identity address of the owner of the jobs',
            type: 'string',
            default: idAddress,
          });
      },
    )
    .command(
      'listJobs [idKeystoreOwner]',
      'List jobs owned by an identity, or list all of them if idKeystoreOwner is omitted',
      (yargs) => {
        yargs
          .positional('idKeystoreOwner', {
            describe: 'The identity address of the owner of the jobs to list',
            type: 'string',
          })
          .option('statuses', {
            alias: 's',
            describe: 'The status(es) of the jobs to list',
            type: 'array',
          });
      },
    )
    .options({
      debug: {
        alias: 'd',
        type: 'boolean',
        default: false,
        describe: 'Show debugging information',
      },
      json: {
        alias: 'j',
        type: 'boolean',
        default: false,
        describe: 'Show the output in JSON format',
      },
    })
    .demandCommand(1, 'A command must be specified')
    .strict()
    .parse();

  const [command] = argv._;
  await sendRequest(command, argv);
}

/**
 * Sends the request to the route specified. Manipulates the owner's jobs
 * accordingly.
 *
 * @param {string} requestRoute
 * @param {object} argv
 * @param {string} argv.jobAddress
 * @param {string} argv.jobOwner
 * @param {string} argv.paymentAccount
 * @param {string} argv.reason
 * @param {string[]} argv.statuses
 * @param {boolean} argv.debug
 * @param {boolean} argv.json
 */
async function sendRequest(
  requestRoute,
  {
    jobAddress,
    jobOwner,
    paymentAccount,
    reason,
    statuses,
    debug: isDebugging,
    json: isOutputJSON,
  },
) {
  if (isDebugging) {
    debug.enable('job-utility');
  }

  if (Array.isArray(statuses) && statuses.length === 0) {
    throw new Error('statuses option should not be an empty array');
  }

  let requestIdentity = idKeystore;
  let requestPayload;
  let microservice;
  switch (requestRoute) {
    case 'cancelJob':
      microservice = 'job-submit';
      if (reason === '') {
        throw new Error(
          'An empty reason should not be given for cancelling jobs.',
        );
      }

      requestPayload = {
        ownerAddress: jobOwner,
        reason,
        job: jobAddress,
      };
      break;
    case 'cancelAllJobs':
      requestIdentity = accountKeystore;
      microservice = 'job-submit';
      if (reason === '') {
        throw new Error('An empty reason cannot be given for cancelling jobs.');
      }

      requestPayload = {
        paymentAccount,
        reason,
      };
      break;
    case 'countJobs':
      microservice = 'pheme';
      if (typeof jobOwner === 'undefined') {
        requestPayload = {
          jobOwner: idAddress,
          isSelectingAll: true,
        };
      } else {
        requestPayload = { jobOwner };
      }
      break;
    case 'countSlices':
      microservice = 'pheme';
      requestPayload = {
        jobOwner,
        job: jobAddress,
      };
      break;
    case 'elapsedJobTime':
      microservice = 'job-submit';
      requestPayload = {
        job: jobAddress,
      };
      break;
    case 'fetchJobReport':
      microservice = 'pheme';
      requestPayload = {
        jobOwner,
        job: jobAddress,
      };
      break;
    case 'fetchSliceReport':
      microservice = 'pheme';
      requestPayload = {
        jobOwner,
        job: jobAddress,
      };
      break;
    case 'listJobs':
      microservice = 'job-submit';
      if (typeof jobOwner === 'undefined') {
        requestPayload = {
          idKeystoreOwner: idAddress,
          isSelectingAll: true,
        };
      } else {
        requestPayload = { idKeystoreOwner: jobOwner };
      }

      if (statuses) {
        requestPayload.statuses = statuses;
      }
      break;
    default:
      assert(false, 'An invalid command was specified');
  }

  log('requestPayload:', requestPayload);

  const microserviceURL = schedulerURL.resolve(microservice);

  spinner = ora({
    isSilent: isOutputJSON,
  }).start(
    `Sending request ${green(requestRoute)} to ${green(microserviceURL)}`,
  );

  /**
   * Intercept calls to console.error to make output nicer while spinner is
   * active. e.g. Handle "Could not connect to..." console messages from the
   * protocol.
   */
  const logError = console.error;
  console.error = (...args) => {
    spinner.clear().frame();
    logError(...args);
  };

  microserviceConnection = new Connection(microserviceURL, requestIdentity);
  const {
    success,
    payload: responsePayload,
  } = await microserviceConnection.send(requestRoute, requestPayload);

  if (isOutputJSON) {
    console.log(JSON.stringify(responsePayload, null, 2));
  } else if (!success) {
    spinner.fail();
    log('responsePayload', responsePayload);
    const errorCodeDisplay =
      typeof responsePayload.code !== 'undefined'
        ? ` (${responsePayload.code})`
        : '';
    console.error(
      red(`Response Error${errorCodeDisplay}:`),
      responsePayload.message,
    );

    process.exitCode = 1;
  } else {
    spinner.succeed();
    console.log('Response:', JSON.stringify(responsePayload, null, 2));
  }
}

const errorHandler = (error) => {
  if (typeof spinner.fail === 'function') {
    spinner.fail();
  }

  log(error);
  console.error(red('Command Error:'), error.message, error.stack);
  process.exitCode = 1;
};

const finallyHandler = async () => {
  if (
    typeof microserviceConnection !== 'undefined' &&
    typeof microserviceConnection.close === 'function'
  ) {
    await microserviceConnection.close();
  }

  process.exit();
};

initDCPClient().then(main).catch(errorHandler).finally(finallyHandler);
