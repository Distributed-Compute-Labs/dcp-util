#!/usr/bin/env node
/**
 *  @file       job-utility.js
 *              Utility to inspect and manipulate running jobs.
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *              Karen Batch, karen@kingsds.network
 *  @date       April 2019
 */

const process = require('process');

async function main () {
  const { argv } = require('dcp/dcp-cli')
  .base('Inspect and manipulate running jobs on the command line.')
  .command('listJobs',
    'List attributes of jobs.', {
      all: {
        describe: 'List all jobs on the scheduler',
        type: 'boolean',
        default: false,
      }
    })
  .command('countJobs',
    'Count jobs.', {
      all: {
        describe: 'Count all jobs on the scheduler',
        type: 'boolean',
        default: false,
      }
    })
  .command('countTasks <jobID>',
    'Count tasks belonging to the specified job.')
  .command('elapsedTime <jobID>',
    'Display how long each slice belonging to the specified job has been running.')
  .command('cancelJob <jobID>',
    'Cancels the specified job, halting execution.')
  .command('cancelAllJobs',
    'Cancels all jobs')
  .command('fetchJobReport <jobID>',
    'Returns information and status of the specified job')
  .command('fetchSliceReport <jobID>',
    'Returns status and history of slices for a specified job')
  .demandCommand(1, 'A command must be specified')
  .strict().argv;

  const command = argv._[0];
  const response = await sendRequest(command, argv);
  console.log(JSON.stringify(response, null, 2));

}

/**
 * Sends the request to the route specified. Manipulates the owner's jobs accordingly.
 * @param {string} command
 * @param {object} argv
 */
async function sendRequest (command, argv) {
  const protocolV4 = require('dcp/protocol-v4');
  const { DcpURL } = require('dcp/dcp-url');
  const wallet = require('dcp/wallet');

  const accountKeystore = await wallet.get();

  const schedulerURL = new DcpURL(argv.scheduler);
  const schedulerConnection = new protocolV4.Connection(schedulerURL.resolve('/DCPv4'));
  
  let operation;
  switch (command) {
    case 'elapsedTime':
      operation = 'elapsedJobTime';
      break;
    default:
      operation = command;
  }
  
  let payload;
  switch (command) {
    case 'listJobs':
    case 'countJobs':
      payload = {
        all: argv.all,
      };

      break;

    case 'countTasks':
    case 'elapsedTime':
    case 'cancelJob':
    case 'fetchJobReport':
    case 'fetchSliceReport':
      payload = {
        jobID: argv.jobID,
      };

      break;

    default:
  }

  console.log(`Sending request ${command}...`);
  const response = await schedulerConnection.send(operation, {
    owner: accountKeystore.address,
    ...payload,
  }, accountKeystore);
  
  return response.payload;
}

require('dcp-client').init()
.then(main)
.catch(e => {
  console.error("Failed to execute command:");
  console.error(e);
  process.exitCode = 1;
})
.finally(() => setImmediate(process.exit));
