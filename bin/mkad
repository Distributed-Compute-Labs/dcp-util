#!/usr/bin/env node
/**
 *  @file       mkad.js
 *              Manipulate Keystore/Address Data.
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */

const path = require('path');
const fs = require('fs');
const os = require('os');
const process = require('process');
const expandTilde = require('expand-tilde');

require('dcp-client').initSync();

const { base } = require('dcp/dcp-cli');
const { dotDcpDir } = require('dcp/dcp-dot-dir');
const { Keystore, isPrivateKey, load } = require('dcp/wallet');

/**
 * @param handler
 * @returns
 */
function wrapHandler(handler) {
  return async function (argv) {
    try {
      await handler(argv);
      process.exit(0);
    } catch (e) {
      console.error(`Error in '${argv._[0]}' command handler:`);
      console.error(e);
      process.exit(1);
    }
  };
}

/**
 *
 */
async function main() {
  base('Manipulate Keystore/Address Data.')
    .command(
      'new [label]',
      'Create a new keystore file',
      (yargs) => {
        yargs
          .positional('label', {
            describe: 'Label for the keystore, used for the filename',
            default: 'default',
          })
          .options({
            passphrase: {
              alias: 'p',
              describe:
                'Passphrase used to encrypt the keystore, will prompt if not provided',
              type: 'string',
            },
            privateKey: {
              alias: 'pk',
              describe:
                'Create a keystore from a private key, will be randomly generated if not provided',
              type: 'string',
            },
            dir: {
              describe: 'Directory to save the generated keystore to',
              default: dotDcpDir,
            },
          });
      },
      wrapHandler(createKeystore),
    )
    .command(
      'show <keystore>',
      'Reads the keystore file and displays its information',
      (yargs) => {
        yargs
          .positional('keystore', {
            type: 'string',
            describe: 'A label, filepath, or private key',
          })
          .options({
            dir: {
              alias: 'd',
              describe:
                'Directory to load the keystore from, if a label was provided',
              default: dotDcpDir,
            },
            passphrase: {
              alias: 'p',
              describe:
                'Passphrase to unlock the keystore with, will prompt if not provided',
              type: 'string',
            },
            showPrivateKey: {
              describe:
                'Set this flag to include the private key in the output',
              type: 'boolean',
              default: false,
            },
          });
      },
      wrapHandler(showKeystore),
    )
    .command(
      'change-passphrase <keystore>',
      "Change a keystore file's passphrase",
      (yargs) => {
        yargs
          .positional('keystore', {
            describe: 'A label or filepath',
            type: 'string',
          })
          .options({
            dir: {
              alias: 'd',
              describe:
                'Directory to load the keystore from, if a label was provided',
              default: dotDcpDir,
            },
            oldPassphrase: {
              alias: 'o',
              describe:
                'Passphrase to unlock the original keystore with, will prompt if not provided',
              type: 'string',
            },
            newPassphrase: {
              alias: 'p',
              describe:
                'Passphrase to lock the new keystore with, will prompt if not provided',
              type: 'string',
            },
          });
      },
      wrapHandler(changeKeystorePassphrase),
    )
    .demandCommand(1, 'A command must be specified')
    .strict()
    .parse();
}

main().catch((e) => {
  console.error('Failed to execute command:');
  console.error(e);
  process.exit(1);
});

/**
 * Create a new keystore from the provided options
 *
 * @param {object} argv
 * @param {string}  argv.label
 * @param {string}  argv.passphrase
 * @param {string}  argv.privateKey
 * @param {string}  argv.dir
 */
async function createKeystore(argv) {
  const { passphrase, privateKey, dir } = argv;
  let { label } = argv;

  // Remove .keystore from label
  [, label] = label.match(/^(.*?)(\.keystore)?$/);

  let keystoreArgs = [];
  if (typeof passphrase === 'string')
    keystoreArgs = [privateKey || null, passphrase];
  else if (typeof privateKey === 'string') keystoreArgs = [privateKey];

  const ks = await new Keystore(...keystoreArgs);

  const ksObj = ks.toJSON();
  ksObj.label = label;

  const filename = `${label}.keystore`;
  const fullpath = path.resolve(expandTilde(dir), filename);
  const dirname = path.dirname(fullpath);
  if (!fs.existsSync(dirname)) {
    console.error(
      `Failed to save keystore: Directory ${dirname} does not exist`,
    );
  } else if (fs.existsSync(fullpath)) {
    console.error(
      `Failed to save keystore: A file named ${filename} already exists in ${dirname}`,
    );
  } else {
    fs.writeFileSync(fullpath, JSON.stringify(ksObj));
    console.log(`Created keystore ${filename} in ${dirname}`);
  }
}

/**
 * Unlocks a keystore
 *
 * @param {object} argv
 * @param {string}  argv.keystore
 * @param {string}  argv.dir
 * @param {string}  argv.passphrase
 * @param {boolean} argv.showPrivateKey
 */
async function showKeystore(argv) {
  const { keystore, dir, passphrase, showPrivateKey } = argv;

  let ks;
  if (isPrivateKey(keystore)) {
    ks = await new Keystore(keystore, '');
  } else {
    const loadResult = await load({
      name: keystore,
      dir,
    });
    ks = loadResult.keystore;
  }

  console.log(`Keystore "${keystore}":`);
  console.group();
  console.log('Label:', ks.label);
  console.log('Address:', ks.address.toString());
  if (showPrivateKey) {
    if (typeof passphrase === 'string') await ks.unlock(passphrase);
    console.log('Private Key:', (await ks.getPrivateKey()).toString());
  }
  console.groupEnd();
}

/**
 * Changes a keystore's passphrase
 *
 * @param {object} argv
 * @param {string}  argv.keystore
 * @param {string}  argv.dir
 * @param {string}  argv.oldPassphrase
 * @param {string}  argv.newPassphrase
 */
async function changeKeystorePassphrase(argv) {
  const { keystore, dir, oldPassphrase, newPassphrase } = argv;

  const { keystore: oldKeystore, filename: oldFilename } = await load({
    name: keystore,
    dir,
  });

  console.log(`Changing passphrase for keystore in "${oldFilename}"...`);

  const unlockArgs = [];
  if (typeof oldPassphrase === 'string') unlockArgs.push(oldPassphrase);
  await oldKeystore.unlock(...unlockArgs);

  const newKeystoreArgs = [await oldKeystore.getPrivateKey()];
  if (typeof newPassphrase === 'string') newKeystoreArgs.push(newPassphrase);
  const newKeystore = await new Keystore(...newKeystoreArgs);
  newKeystore.label = oldKeystore.label;

  const oldStats = fs.statSync(oldFilename);
  const tempFilename = `${oldFilename}.temp-${os.hostname()}-${process.pid}`;
  const {
    constants: { O_CREAT, O_EXCL, O_WRONLY },
  } = fs;
  const flags = O_CREAT | O_EXCL | O_WRONLY;
  const mode = oldStats.mode & 0777;

  // Open a temp file in the same location as the old keystore
  //  - Must be a new file, in write-only mode (from flags)
  //  - Preserve permissions of old file (from mode)
  //  - Preserve ownership of old file (from oldStats uid/gid)
  const fd = fs.openSync(tempFilename, flags, mode);
  fs.fchownSync(fd, oldStats.uid, oldStats.gid);
  fs.writeSync(fd, JSON.stringify(newKeystore));
  fs.closeSync(fd);

  try {
    // Finally, replace the old keystore with the new one
    fs.renameSync(tempFilename, oldFilename);
    console.log('Successfully changed keystore passphrase.');
  } catch (e) {
    console.error(e);
    fs.unlinkSync(tempFilename); // delete the temp file on fail
  }
}
