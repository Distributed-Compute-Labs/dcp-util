#! /usr/bin/env node
/**
 *  @file       mkad.js
 *              Manipulate Keystore/Address Data.
 *
 *  @author     Ryan Rossiter, ryan@kingsds.network
 *  @date       April 2020
 */

const path = require('path');
const fs = require('fs');
const process = require('process');
const expandTilde = require('expand-tilde');

function wrapHandler(handler) {
  return async function (argv) {
    try {
      await handler(argv);
      process.exit(0);
    } catch (e) {
      console.error(`Error in '${argv._[0]}' command handler:`);
      console.error(e);
      process.exit(1);
    }
  }
}

async function main() {

  await require('dcp-client').init(process.argv);
  const { dotDcpDir } = require('dcp/dot-dcp-dir');

  require('dcp/dcp-cli')
  .base('Manipulate Keystore/Address Data.')
  .hide('identity')
  .hide('identity-file')
  .hide('default-bank-account')
  .hide('default-bank-account-file')
  .command(['create [label]', 'new'],
    'Create a new keystore', (yargs) => {
      yargs
      .positional('label', {
        describe: 'Label for the keystore, used for the filename',
        default: 'default',
      })
      .options({
        passphrase: {
          alias: 'p',
          describe: 'Passphrase used to encrypt the keystore',
          default: '',
        },
        emptyPassphrase: {
          describe: 'This flag must be set to create a keystore without a passphrase',
          type: 'boolean',
          default: false,
        },
        privateKey: {
          alias: 'pk',
          describe: 'Create a keystore from a private key, will be randomly generated if not provided',
          default: null,
        },
        dir: {
          describe: 'Directory to save the generated keystore to',
          default: dotDcpDir,
        },
      });
    },
    wrapHandler((argv) => createKeystore(argv)))
  .command(['show <keystore>', 'unlock'],
    'Unlocks the keystore and displays its information', {
      dir: {
        alias: 'd',
        describe: 'Directory to load the keystore from',
        default: dotDcpDir,
      },
      passphrase: {
        alias: 'p',
        describe: 'Passphrase to unlock the keystore with',
        default: '',
      },
      showPrivateKey: {
        describe: 'Set this flag to include the private key in the output',
        type: 'boolean',
        default: false,
      }
    },
    wrapHandler((argv) => unlockKeystore(argv)))
  .demandCommand(1)
  .strict().argv;
}

main()
.catch(e => {
  console.error("Failed to execute command:");
  console.error(e);
  process.exit(1);
});

/**
 * Create a new keystore from the provided options
 * @param {object} argv
 * @param {string}  argv.label
 * @param {string}  argv.passphrase
 * @param {boolean} argv.emptyPassphrase
 * @param {string}  argv.privateKey
 * @param {string}  argv.dir
 */
async function createKeystore(argv) {
  const { passphrase, emptyPassphrase, privateKey, dir } = argv;
  let { label } = argv;

  if (!passphrase && !emptyPassphrase) {
    console.log('The --emptyPassphrase flag must be set to create a keystore with no passphrase.');
    return;
  }

  label = label.match(/^(.*?)(\.keystore)?$/)[1]; // remove .keystore from label

  const { Keystore } = require('dcp/wallet');
  const ks = await new Keystore(privateKey, passphrase);

  const ksObj = ks.toJSON();
  ksObj.label = label;

  const filename = `${label}.keystore`;
  const fullpath = path.resolve(expandTilde(dir), filename);
  const dirname = path.dirname(fullpath);
  if (!fs.existsSync(dirname)) {
    console.error(`Failed to save keystore: Directory ${dirname} does not exist`);
  } else if (fs.existsSync(fullpath)) {
    console.error(`Failed to save keystore: A file named ${filename} already exists in ${dirname}`);
  } else {
    fs.writeFileSync(fullpath, JSON.stringify(ksObj));
    console.log(`Created keystore ${filename} in ${dirname}`);
  }
}

/**
 * Unlocks a keystore
 * @param {object} argv
 * @param {string}  argv.keystore
 * @param {string}  argv.dir
 * @param {string}  argv.passphrase
 * @param {boolean} argv.showPrivateKey
 */
async function unlockKeystore(argv) {
  const { keystore, dir, passphrase, showPrivateKey } = argv;
  const { Keystore } = require('dcp/wallet');

  let filename = keystore;
  if (!filename.match(/\.keystore$/)) {
    filename += '.keystore';
  }

  const fullpath = path.resolve(expandTilde(dir), filename);

  if (!fs.existsSync(fullpath)) {
    console.error(`Failed to locate keystore file at ${fullpath}`);
    return;
  }

  const ks = await new Keystore(fs.readFileSync(fullpath, 'utf-8').trim(), passphrase);
  
  const filenameNoExt = filename.replace('.keystore', '');
  console.log(`Keystore "${filenameNoExt}":`);
  console.group();
    console.log("Label:", ks.label);
    console.log("Address:", ks.address.toString());
    if (showPrivateKey) {
      if (passphrase) await ks.unlock(passphrase);
      console.log("Private Key:", (await ks.getPrivateKey()).toString());
    }
  console.groupEnd();
}