#! /usr/bin/env node
/**
 *  Bank Utility - CLI for common bank operations
 *  @author     Eddie Roosenmaallen <eddie@kingsds.network>
 *  @date       August 2020
 */

const process = require('process');

require('dcp-client').initSync(process.argv);

const dcpv4 = require('dcp/protocol-v4');

const bankConn = new dcpv4.Connection(require('dcp/dcp-config').bank.location.resolve('/DCPv4'));


/** Handle CLI and dispatch commands to appropriate handlers
 */
function main() {
  return new Promise((resolve, reject) => {
    const options = require('dcp/dcp-cli')
    .base('CLI for common Bank operations')
    .command(
      'balance',
      'Request account balances',
      {},
      getBalance
    )
    .command(
      'viewFeeStructure <feeStructureAddress>',
      'View details about a FeeStructure', 
      {},
      viewFeeStructure
    )
    .command(
      'transfer <amount> <toAddress>',
      'Transfer credits',
      {},
      transferCredits
    )
    
    .option('quiet', {
      alias: 'q',
      description: 'Less output',
      type: 'boolean',
      default: false,
    })
    .option('json', {
      alias: 'j',
      description: 'Provide output in JSON format',
      type: 'boolean',
      // implies: 'quiet',
      default: false,
    })
    
    .demandCommand()
    
    // Yargs doesn't seem to play well with async command handlers; this 
    // onFinishCommand hook will resolve main() with the result value from 
    // the command function
    .onFinishCommand(resultValue => {
      resolve(resultValue);
    })
    .argv;
  });
}

/** Fetch balance information for the default account
 *  @param {object} options   Yargs options from CLI
 *  @returns {Promise<DCP Payload>}  Resolves to the Account block from the bank
 */
async function getBalance(options) {
  const ks = await require('dcp/dcp-cli').getAccountKeystore();
  
  if (!options.quiet && !options.json)
    console.log(`Fetching account balance for address ${ks.address} at bank ${require('dcp/dcp-config').bank.location}`);
  
  return bankConn.send('viewAccount', { address: ks.address }, ks)
    .then(res => {
      const { address, balance, escrow } = res.payload;
      
      if (options.json) {
        console.log(JSON.stringify(res.payload, null, 2));
      }
      else {
        console.log(`Account info for ${address}:`);
        console.log(`  Balance: ${balance}`);
        
        if (escrow && parseInt(escrow.num)) {
          console.log(`  Escrow count: ${escrow.num}`);
          console.log(`  Escrow total: ${escrow.total}`);
        }
      }
      
      // console.debug(res.payload);
      
      return res.payload;
    });
}

/**
 *  Fetch details about a FeeStructure from the bank
 *
 *  @param  {object} options Parsed Yargs options
 *          .feeStructureAddress: Fee structure to fetch
 *  @return {Promise<FeeStructure>}  Resolves to the requested FeeStructure
 */
async function viewFeeStructure(options) {
  const ks = await require('dcp/dcp-cli').getAccountKeystore();
  const feeStructureAddress = '0x' + (options.feeStructureAddress.replace(/^0x/, ''));
  
  if (!options.quiet && !options.json) {
    console.log('Fetching FeeStructure:', feeStructureAddress);
    console.log(`   (owned by ${ks.address})`);
  }
  
  return bankConn.send('viewFeeStructure', { feeStructureAddress }, ks)
    .then(res => {
      if (options.json) {
        console.log(JSON.stringify(res.payload, null, 2));
      }
      else {
        const { address, fromAddress, escrow, balance, moved, maxTotal, maxPerRequest } = res.payload;
        
        console.log('Fee Structure:');
        console.log('  Address:      ', address);
        console.log('  From Account: ', fromAddress);
        console.log('  Type:         ', escrow ? 'Escrow' : 'Dynamic');
        console.log('  Slice Price:  ', maxPerRequest.padStart(22));
        console.log('  Total amount: ', maxTotal.padStart(22));
        console.log('  Moved:        ', moved.padStart(22));
        console.log('  Balance:      ', balance.padStart(22));
      }
      
      return res.payload;
    });
}

/**
 *  Transfer credits to another account
 *
 *  @param  {object} options Parsed Yargs options
 *    .amount:     Amount to transfer
 *    .toAddress:  Address to transfer to. If mixed case, checksum will be validated
 *  @return {Promise<FeeStructure>}  Resolves to the requested FeeStructure
 */
async function transferCredits(options) {
  const ks = await require('dcp/dcp-cli').getAccountKeystore();
  const amount = options._[1];
  let toAddress = false;
  
  await require('dcp/wallet').get(options.toAddress)
  .then(dest => {
    return toAddress = dest.address.toString();
  })
  .catch(error => {
    if (error.message.includes('Could not locate keystore')
      && options.toAddress.match(/^(0x)?([a-fA-F0-9]+)$/)) {
      toAddress = options.toAddress;
    }
    else {
      throw error;
    }
  });
  
  if (!options.quiet && !options.json) {
    console.log('Sending transfer')
    console.log('  From Address: ' + ks.address)
    console.log('  To Address:   ' + toAddress);
    console.log('  Amount:       ' + amount);
  }

  return bankConn.send('transferCredits', {
    fromAddress: ks.address,
    toAddress,
    amount,
  }, ks)
    .then(res => {
      if (options.json) {
        console.log(JSON.stringify(res.payload, null, 2));
      }
      else {
        if (!options.quiet)
          console.log('Sent ok');
      }
      
      return res.payload;
    })
    .catch(error => {
      if (error.code === 'ENOFUNDS') {
        console.error('Error: Not enough credits in source account.');
      }
      else if (error.message.includes('Bad checksum for address')) {
        console.error(`Error: Address ${toAddress} has an invalid checksum. Please verify the address and try again.`);
        return false;
      }
      else {
        throw error;
      }
    });
}

main()
.catch(error => {
  console.error('045: Unexpected error:', error);
})
.finally(() => {
  if (bankConn && (bankConn.usable || !bankConn.closed)) {
    // console.info('Disconnecting from Bank...');
    bankConn.close();
  }
});
