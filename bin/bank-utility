#!/usr/bin/env node
/**
 *  Bank Utility - CLI for common bank operations
 *
 *  @author     Eddie Roosenmaallen <eddie@kingsds.network>
 *  @date       August 2020
 */

const debug = require('debug');
const { init: initDCPClient } = require('dcp-client');

let base;
let getAccountKeystore;
let Address;
let Connection;
let bankLocation;
let getBankConnection;
let bankConnection;

const log = debug('bank-utility');

/**
 * Handle CLI and dispatch commands to appropriate handlers
 */
function main() {
  ({ base, getAccountKeystore } = require('dcp/cli'));
  ({ Address } = require('dcp/wallet'));
  ({ Connection } = require('dcp/protocol-v4'));
  ({
    bank: { location: bankLocation },
  } = require('dcp/dcp-config'));

  getBankConnection = () => new Connection(bankLocation.resolve('bank-teller'));

  return new Promise((resolve, _reject) => {
    base('CLI for common Bank operations')
      .command('balance', 'Request account balances', {}, getBalance)
      .command(
        'transfer <amount> <toAddress>',
        'Transfer credits',
        {},
        transferCredits,
      )
      .option('quiet', {
        alias: 'q',
        description: 'Less output',
        type: 'boolean',
        default: false,
      })
      .option('json', {
        alias: 'j',
        description: 'Provide output in JSON format',
        type: 'boolean',
        default: false,
      })
      .demandCommand(1)
      /**
       * Yargs doesn't seem to play well with async command handlers; this
       * onFinishCommand hook will resolve main() with the result value from the
       * command function.
       */
      .onFinishCommand((resultValue) => {
        resolve(resultValue);
      })
      .parse();
  });
}

/**
 * Fetch balance information for the default account
 *
 * @param {object} options Yargs options from CLI
 * @returns {Promise<object>}  Resolves to the Account block from the bank
 */
async function getBalance(options) {
  const ks = await getAccountKeystore();

  if (!options.quiet && !options.json)
    console.log(
      `Fetching account balance for address ${ks.address} at bank ${bankLocation}`,
    );

  bankConnection = getBankConnection();

  const { payload } = await bankConnection.send(
    'viewAccount',
    { address: ks.address },
    ks,
  );

  if (options.json) {
    console.log(JSON.stringify(payload, null, 2));
  } else {
    const { address, balance, escrow } = payload;
    console.log(`Account info for ${address}:`);
    console.log(`  Balance: ${balance}`);

    if (escrow && parseInt(escrow.num, 10)) {
      console.log(`  Escrow count: ${escrow.num}`);
      console.log(`  Escrow total: ${escrow.total}`);
    }
  }

  log(payload);

  return payload;
}

/**
 * Transfer credits to another account
 *
 * @param {object} options - Parsed Yargs options
 * @param {number} options.amount - Amount to transfer
 * @param {string} options.toAddress - Address to transfer to. If mixed case,
 * checksum will be validated
 * @returns {Promise<object>} Resolves to the requested FeeStructure
 */
async function transferCredits(options) {
  const amount = options.amount || options._[1];
  const toAccount = String(new Address(String(options.toAddress)));
  const ks = await getAccountKeystore();

  if (!options.quiet && !options.json) {
    console.log('Sending transfer');
    console.log(`  From Address: ${ks.address}`);
    console.log(`  To Address:   ${toAccount}`);
    console.log(`  Amount:       ${amount}`);
  }

  bankConnection = getBankConnection();

  try {
    const { payload } = await bankConnection.send(
      'transferCredits',
      {
        fromAccount: ks.address,
        toAccount,
        amount,
      },
      ks,
    );

    log(payload);

    if (options.json) {
      console.log(JSON.stringify(payload, null, 2));
    } else if (payload.name === 'Error') {
      console.error('Unable to complete transfer for the following reason:');
      console.error(payload.message);
    } else if (!options.quiet) {
      console.log('Transfer successful!');
    }

    return payload;
  } catch (error) {
    if (error.code === 'ENOFUNDS') {
      console.error('Error: Not enough credits in source account.');
      return error;
    }

    if (error.message.includes('Bad checksum for address')) {
      console.error(
        `Error: Address ${toAccount} has an invalid checksum. Please verify the address and try again.`,
      );

      return error;
    }

    throw error;
  }
}

initDCPClient()
  .then(main)
  .catch((error) => {
    console.error('045: Unexpected error:', error);
  })
  .finally(() => {
    if (
      typeof bankConnection === 'object' &&
      (bankConnection.usable || !bankConnection.closed)
    ) {
      log('Disconnecting from Bank...');
      bankConnection.close();
    }
  });
