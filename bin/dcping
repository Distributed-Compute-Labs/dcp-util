#! /usr/bin/node
/** @file       dcping.js       DCPing uses the Compute API to send a job with a 
 *                              trivial work function and one or more points in 
 *                              the input dataset accross a distributed computer
 *                              built with DCP. It will then report on the time 
 *                              consumed to compute the job, and how many workers 
 *                              returned their slices, which can be used to assess 
 *                              the health of the system.
 *
 * @author       Duncan Mays, duncan@kingsds.network
 * @date         May 2019
 */

require('dcp-rtlink').init();
const cli = require('dcp/dcp-cli');
const { URL } = require('dcp/dcp-url');

cli.name = 'Ping the DCP network';

var dcpConfig
var debug = process.env.DEBUG && !!process.env.DEBUG.match(/\bdcping\b/)

// rpn is a HTTP request client with promise support
const rpn = require('request-promise-native')

// number of jobs (pings) sent to scheduler
let jobsSent = 0

// number of jobs completely returned by the scheduler
let jobsCompleted = 0

// the number of failed jobs isn't necessarily jobsSent-jobsCompleted, if SIGINT is broadcast while a job is pending, that job will neither
// complete nor fail, but will have been sent.
let jobsFailed = 0

// total number of slices sent through the duration of the program, not just during one job
let totalSlicesSent = 0

// total number of slices returned through the duration of the program, not just during one job
let totalSlicesReturned = 0

// number of slices returned during one job, not during the duration of the program
let slicesReturned = 0

// mode controls how the program behaves, see main at the bottom for all the modes and how they behave, can be configuresd with the -f and --interval options
let mode = 'normal'

// Keystore which will be used to pay for jobs
var keystore = false;

// when ctrl C is pressed, call endProgram
process.on('SIGINT', () => {
  console.log('\n');
  endProgram();
})

const options = require('dcp/dcp-cli').base()
  .option('count', {
    alias: 'c',
    description: 'Number of times to ping the scheduler',
    defaultDescription: 'Ping continuously until program is terminated',
    default: 0,
    type: 'number',
  })
  .option('slices', {
    alias: 's',
    description: 'Slices per job',
    default: 3,
    type: 'number',
  })
  .option('wait', {
    alias: 'W',
    description: 'Timeout for each job, in seconds',
    default: 120,
    type: 'number',
  })
  .option('verbose', {
    alias: 'v',
    description: 'Additional output',
    default: false,
    type: 'boolean',
  })
  .option('flood', {
    alias: 'f',
    description: 'Flood the scheduler with pings as fast as possible',
    default: false,
    type: 'boolean',
  })
  .option('interval', {
    description: 'Interval mode; if set, emit a job every [interval] seconds. Must be >= [timeout]',
    default: 120,
    type: 'number',
  })
  .option('cost', {
    alias: 'C',
    description: 'Offered cost per slice, in DCC',
    default: 0.0015,
    type: 'number',   // my kingdom for `type: 'BigNumber',`!
  })
  .epilogue(`
By the number of slices that return, and how fast they return, the health of the network can be assessed.

NOTE TO THE USER:
This is by no means a complete utility, certain libraries are missing that would otherwise have been used here, namely some API for keystore access, and a safeMarketValue function, where the market value of a slice is received from the scheduler and used as the cost per slice.`)
  .argv;

/**
 *  @hack The original logic here is... interesting.
 *  - if `count` is specified on commandline, then `notContinuous` will be set to 1;
 *    a later loop uses that as the decrementor, counting down from `numJobs`.
 *  - if `count` is not specified, then we are in 'continuous' mode. The same for
 *    loop is used, but it counts down from (any nonzero, we used 3) in steps of 0,
 *    effectively a while(true){};
 */
const numJobs = options.count || 3;
const notContinuous = options.count ? 1 : 0;

const numSlicesPerJob = options.slices;

const interval = parseFloat(options.interval);
let timeLimit = options.wait;     // this one might get changed, below

if (options.flood) {
  mode = 'flood';
}
else if ((options.count === 0) && (options.interval)) {
  mode = 'interval';
}

const costProfile = parseFloat(options.cost) || 0.0015;

const verbose = options.verbose;


console.log('parsed options:', options);
console.log('consequent operating environment:', {
  mode,
  numJobs,
  notContinuous,
  numSlicesPerJob,
  interval,
  timeLimit,
  costProfile,
  verbose,
})
process.exit(123);


/** main program exit point
    displays results of pings and shows an error if any jobs did not return
 */
function endProgram (errorCode) {
  // adds a line after previous output to make output more attractive
  console.log('--------------------------------------------------------------------------------')

  console.log(jobsSent + ' jobs submitted, ' + jobsCompleted + ' jobs completed, %' + Math.round(10000 * (jobsSent - jobsCompleted) / jobsSent) / 100 + ' jobs failed')
  console.log(totalSlicesSent + ' slices submitted, ' + totalSlicesReturned + ' slices returned, %' + Math.round(10000 * (totalSlicesSent - totalSlicesReturned) / totalSlicesSent) / 100 + ' slices lost')

  // tells a parent program that an error occured if any jobs failed
  if (jobsFailed > 0) {
    errorCode = 1
  }

  process.exit(errorCode)
}

/** erases num characters from the current console line, cannot erase the line above
 */
function erase (num) {
  let backspaceCharacters = '\b'.repeat(num);
  process.stdout.write(backspaceCharacters)
}

/** Handle an error (rejection) from the rpn() "fetch" function.
 *
 *  @param      {object}        error   The rejection from rpn.  The call to rpn() /must/ use
 *                              the (default) simple module and the `resolveWithFullResponse: true`
 *                              option.
 *  @returns    {string}        An error message, formatted with ANSI color when the output
 *                              is a terminal, suitable for writing directly to stdout. If
 *                              the response included html content (eg a 404 page), it is 
 *                              rendered to text in this string.
 *  @throws     when error is not a type we can pretty-print (DNS failure, bad HTTP status, etc). 
 *              If the error was an instance of Error, we append extra information to the stack property 
 *              to include the calling location rather than bottoming out at the Promise.
 *  @see        require('request-promise-native')
 *
 *  @example    <code>
 *  try { 
 *    await rpn({uri: confHref, resolveWithFullResponse: true, simple: true}) 
 *  } catch (e) {
 *    console.log(rpnPrettyReject(e))
 *  }
 *  </code>
 */

function rpnPrettyReject(error) {
  let response, message
  const chalk = new require('chalk').constructor({enabled: require('tty').isatty(0)})

  if (error.name === 'RequestError' && error.cause.errno === 'ENOTFOUND')
    return chalk.bold('Unable to connect') + `: DNS cannot resolve '${error.error.hostname}'`
  
  if (!error.statusCode) {
    if (error instanceof Error)
      error.stack += '\n-------------------\n' + new Error().stack.split('\n').slice(2).join('\n')
    throw error
  }

  response = error.response
  message = `HTTP Status: ${response.statusCode} accessing ${response.request.href}`
  
  switch(response.headers['content-type'].replace(/;.*$/, '')) {
  case 'text/plain':
    message += '\n' + chalk.grey(response.body)
    break;
  case 'text/html':
    message += '\n' + chalk.grey(require('html-to-text').fromString(response.body, {
      wordwrap: parseInt(process.env.COLUMNS, 10) || 80,
      format: {
        heading: function (elem, fn, options) {
          var h = fn(elem.children, options);
          return '====\n' + chalk.yellow(chalk.bold(h.toUpperCase())) + '\n====';
        }
      }}))
    break;
  }

  return message
}    

/** loads the compute and protocol modules of DCP into the namespace
 */
function loadCompute () {
  return require('dcp-client').init(options.scheduler)
    .then(() => {
      require('dcp/config').load();
      return cli.getAccountKeystore();
    })
    .then(ks => keystore = ks );
}

/** called when a job is accepted by the scheduler
 */
function onAccepted (jobID) {
  jobsSent++
  totalSlicesSent += numSlicesPerJob
  if (verbose) {
    console.log('Job accepted, ID: ' + jobID)
  } else {
    // if not verbose, only display the first 20 digits of the job ID, we're slicing 22 off since the first two digits are 0x
    console.log('Job accepted, ID: ' + jobID.slice(0, 22))
  }

  updateSliceCount()
}

/** called when a slice is returned by the scheduler
 */
function onResult () {
  if (this.cancelled) { return } // DCP-563

  slicesReturned++
  totalSlicesReturned++

  updateSliceCount()
}

/** called when all the slices from a job are returned
 */
function onJobComplete () {
  jobsCompleted++
}

/** body of the program, does the actual pinging and interaction with compute API
 */
async function ping (numSlices) {
  // this is the array that will be distributed on the network
  let input = []
  for (let i = 1; i < numSlices + 1; i++) {
    input.push(i)
  }

  // sets up the job
  const job = require('dcp/compute').for([input], trivialWork)
  var resultFn = onResult.bind(job)
  job.on('accepted', () => onAccepted(job.id))
  job.on('result', resultFn)
  job.on('complete', () => onJobComplete())

  job.public = {
    name: 'DCPing'
  }

  // resets number of slices returned
  slicesReturned = 0
  // starts timer for how long the job takes
  const startTime = eval(new Date()).getTime()

  try {
    await new Promise((resolve, reject) => {
      let timeout = false;
      
      console.log('using keystore:', keystore);
      job.exec(costProfile, keystore).then((ev) => resolve(ev), (ev) => reject('error in job creation ' + ev))
        .finally(()=> {
          if (timeout) {
            clearTimeout(timeout);
            timeout = false;
          }
        });

      timeout = setTimeout(async () => {
        // dm may 2019 - DCP-564 job.removeEventHandler('result', resultFn);
        job.cancelled = true
        await job.cancel()
        jobsFailed++
        reject(' : job timed out')
      }, timeLimit * 1000);
    })
  } catch (error) {
    process.stdout.write(error)
  }

  // ends timer and displays result
  if (mode !== 'flood') {
    const endTime = eval(new Date()).getTime()
    const timeForJobCompletion = endTime - startTime
    console.log(' : Time for completion = ' + timeForJobCompletion + 'ms')
  }
}

/** simply returns the number given to it to test that the worker is working, connected to the network and functioning
 *  @param input    the number to return
 *  @returns input
 */
function trivialWork (input) {
  progress(1)
  return input
}

/** Information on slices thathave been sent and received are displayed with this function
 */
function updateSliceCount () {
  // only updates the slice count if mode isnt flood
  if (mode !== 'flood') {
    // effectively erases the line
    erase(150)
    // logs the number of slices that have been returned
    process.stdout.write(numSlicesPerJob + ' slices sent : ' + slicesReturned + ' slices returned')
  }
}

/** main program entry point
 */
async function main () {
  // loads compute
  await loadCompute()
  console.log('DCPing scheduler: ' + options.scheduler)

  switch (mode) {
    case 'normal':
      // pings the given scheduler the given number of times, one at a time
      for (let i = numJobs; i > 0; i -= notContinuous) {
        await ping(numSlicesPerJob)
      }

      endProgram(0)
      break
    case 'flood':
      // floods the schedulers with as many jobs as possible
      await setInterval(() => ping(numSlicesPerJob), 300)
      break
    case 'interval':
      // checks and corrects for interval < timeLimit, which would cause unwanted behavior
      if (interval < timeLimit) {
        console.log()
        console.log('pings must timeout before the next one is sent, pings will timeout after ' + interval + ' seconds')
        timeLimit = interval
        console.log()
      }

      // pings the scheduler every interval of a given length
      ping(numSlicesPerJob)
      await setInterval(() => ping(numSlicesPerJob), interval * 1000)
      break
  }
}

main()
