#! /usr/bin/env node
/**
  * @file         DCPing
  *               DCPing is a simple utility that uses the Compute API
  *               with a trivial work function.
  *               It reports the time taken to compute the job, and the
  *               number of slices returned.
  *
  * @author       Duncan Mays, <duncan@distributive.network>
  * @date         May 2019
  *
  * @author       Joash Mathew, <joash@distributive.network>
  * @date         August 2023
  */
require('dcp-client').initSync();
const cli = require('dcp/cli');
const os = require('os');
const wallet = require('dcp/wallet');

cli.name = 'Ping the DCP Network';

const options = cli.base()
  .option('count', {
    alias: 'c',
    description: 'Number of times to ping the scheduler',
    default: 3,
    defaultDescription: 'Ping continuously until the program is terminated',
    type: 'number',
  })
  .option('slices', {
    alias: 's',
    description: 'Slices per job',
    default: 3,
    type: 'number',
  })
  .option('wait', {
    alias: 'W',
    description: 'Timeout between each job',
    default: 5,
    type: 'number',
  })
  .option('discrete', {
    alias: 'd',
    description: 'Set discrete as a job requirement',
    default: true,
    type: 'boolean',
  })
  .option('verbose', {
    alias: 'v',
    description: 'Verbose output for debugging purposes',
    default: false,
    type: 'boolean',
  })
  .option('flood', {
    alias: 'f',
    description: 'Ping the scheduler as fast as possible',
    default: false,
    type: 'boolean',
  })
  .option('interval', {
    default: 0,
    description: 'If set, jobs will be emitted every x seconds. Interval must be >= seconds.',
    type: 'number',
  })
  .option('cost', {
    alias: 'C',
    description: 'Payment offer per slice',
    default: 0.0015,
    type: 'number',
  })
  .option('scheduler', {
    alias: 'S',
    description: 'Scheduler to deploy pings against',
    default: process.env.DCP_SCHEDULER_LOCATION,
    type: 'string',
  })
  .option('supervisor', {
    description: 'Defaults to Sup2, set as 1 to change.',
    default: 2,
    type: 'number',
  })
  .option('keystore', {
    description: 'Specify the name of a keystore to use. Uses default keystore if not specified.',
    type: 'string',
  })
  .epilogue('This tool is a simple tool to check the health of the network based on the number of slices returned, and how fast they returned.')
  .argv;

const scheduler = options.scheduler || process.env.DCP_SCHEDULER_LOCATION;
const jobsToDeploy = options.count;
const slicesPerJob = options.slices;
let paymentKeystore = false;
const discrete = options.discrete;

const verbose = options.verbose;
const slicePaymentOffer = options.cost;
let timeoutTime = options.wait;
let interval = parseFloat(options.interval);

let jobsDeployed = 0;
let jobsCompleted = 0;
let jobsFailed = 0;
let slicesSent = 0;
let slicesReturned = 0;

let mode = 'normal';
if (options.flood)
  mode = 'flood';
else if (options.interval != 0)
{
  mode = 'interval';
  if (interval < timeoutTime)
  {
    verbose && console.log('A job should either end, or timeout before the next one is deployed. New timeout:', timeoutTime);
    timeoutTime = interval;
  }
}

/**
  * @note This code is just temporary while we actually have sup1
  *       and sup2 around. Once sup1 is deprecated, remove this.
  */
if (options.supervisor !== 1 || options.supervisor !== 2)
{
  // set supervisor to 2 by default if invalid input is given.
  dcpConfig.rollout.supervisor = 2;
}
else
{
  dcpConfig.rollout.supervisor = options.supervisor;
}

verbose && console.log('parsed options:', options);
verbose && console.log('DCPing selected options:', {
  mode,
  jobsToDeploy,
  slicesPerJob,
  discrete,
  slicePaymentOffer,
  interval,
  scheduler,
  supervisor: options.supervisor,
  verbose,
});

process.on('SIGINT', () => {
  console.log('\n');
  endProgram(0);
});

process.on('exit', () => {
  console.log('\n');
  endProgram(0);
});

function onAccepted(id)
{
  jobsDeployed += 1;
  verbose && console.log('Deployed job with ID', id);
}

function onResult()
{
  slicesReturned += 1;
  verbose && console.log('Slice returned for job');
}

function onComplete()
{
  jobsCompleted += 1;
  verbose && console.log(`Job completed`);
}

async function ping(sliceCount)
{
  const compute = require('dcp/compute');
  let input = [];
  for (let i = 1; i < sliceCount + 1; i++)
  {
    input.push(i);
  }

  const job = compute.for(input, (num) => {
    progress();
    return num;
  });

  job.on('accepted', (ev) => { slicesSent += sliceCount; onAccepted(ev.id) });
  job.on('result', () => onResult());
  job.on('complete', () => onComplete());

  job.public.name = `DCPing from ${os.hostname()}`;

  if (discrete)
    job.requirements.discrete = true;

  if (options.keystore)
    paymentKeystore = await wallet.get(options.keystore);
  else
  {
    paymentKeystore = await wallet.get();
  }

  const startTime = Date.now();
  try
  {
    await new Promise((resolve, reject) => {
      let timeout = null;
      job.exec(slicePaymentOffer, paymentKeystore).then(() => resolve()).catch((err) => reject(err)).finally(() => {
        if (timeout)
        {
          clearTimeout(timeout);
          timeout = null;
        }
      });

      timeout = setTimeout(async () => {
        await job.cancel();
        jobsFailed += 1;
        reject('Job timed out');
      }, timeoutTime * 60 * 1000);
    });
  }
  catch (error)
  {
    console.error(error);
  }

  if (mode !== 'flood')
  {
    const endTime = Date.now();
    const jobCompletionTime = endTime - startTime;
    console.log('Time for completion =', jobCompletionTime, 'ms');
  }
}

async function endProgram(errorCode)
{
  console.log('-----------------------------------------------------------------------');

  console.log(`${jobsDeployed} jobs deployed, ${jobsCompleted} jobs completed`);
  console.log(`${slicesSent} slices submitted to scheduler, ${slicesReturned} slices returned`);

  if (jobsFailed >= 1)
    process.exit(1);
  process.exit(errorCode);
}

async function main()
{
  verbose && console.log('Scheduler URL:', scheduler);

  switch(mode)
  {
    case 'normal':
      for (let i = 0; i < jobsToDeploy; i++)
      {
        await ping(slicesPerJob);
      }

      endProgram(0);
      break;
    case 'flood':
      setInterval(() => ping(slicesPerJob), 300);
      break;
    case 'interval':
      ping(slicesPerJob);

      setInterval(() => ping(slicesPerJob), interval * 60 * 1000);
      break;
    default:
      break;
  }
}

main();
