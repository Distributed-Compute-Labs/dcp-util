#!/usr/bin/env node
/**
 * @file cg-utility
 *
 * This utility is used to manage compute groups.
 *
 * The following operations are supported:
 * - create compute group
 * - change compute group
 * - delete compute group
 * - remove a specific job in group
 * - remove all jobs in group
 * - list jobs in group
 *
 * Future versions of this utility will also adding/removing jobs from the
 * group, maybe performance-related queries, etc.
 *
 * Eventually, the portal will have a "Compute Groups" page that will also do
 * this with a web interface, but that will come later.
 *
 * @author Ryan Rossiter, ryan@kingsds.network
 * @date Oct 2020
 */

const process = require('process');
const { green } = require('chalk');
const ora = require('ora');
const { init: initDCPClient } = require('dcp-client');

let spinner;
let computeGroupsLocation;

const wrapAPICall = (callback) => async ({
  _: [command],
  debug: isDebugging,
  json: isOutputJSON,
  ...argv
}) => {
  if (isDebugging) {
    process.env.DCP_DEBUG = 'dcp-client:compute-groups';
  }

  spinner = ora({
    isSilent: isOutputJSON || isDebugging,
  }).start(
    `Sending request ${green(command)} to ${green(computeGroupsLocation)}`,
  );

  try {
    const response = await callback(argv);
    const responseJSON = JSON.stringify(response, null, 2);
    if (isOutputJSON) {
      console.log(responseJSON);
    } else {
      spinner.succeed();
      console.log('Response:', responseJSON);
    }
  } catch (error) {
    if (isOutputJSON) {
      console.error(
        JSON.stringify(error, Object.getOwnPropertyNames(error), 2),
      );
    } else {
      spinner.fail();
      console.error(error);
    }
    process.exitCode = 1;
  } finally {
    process.exit();
  }
};

/**
 * Wraps the Compute API using the cli API.
 */
async function main() {
  const { base } = require('dcp/cli');
  const {
    createGroup,
    changeGroup,
    deleteGroup,
    listJobs,
    removeJob,
    removeAllJobs,
  } = require('dcp/compute-groups');

  ({
    scheduler: {
      services: {
        computeGroups: { location: computeGroupsLocation },
      },
    },
  } = require('dcp/dcp-config'));

  base('Manage compute groups.')
    .command(
      'create  <name> [description][options]',
      'Create a new compute group',
      (yargs) =>
        yargs
          .positional('name', {
            type: 'string',
            description: 'The name of the compute group to create',
          })
          .option('description', {
            alias: 'D',
            type: 'string',
            description: 'The description of the compute group to create',
          })
          .options({
            id:                     { type: 'string' },
            joinKey:                { type: 'string' },
            joinSecret:             { type: 'string' },
            joinHash:               { type: 'string'},    
            joinAddress:            { type: 'string'}, 

            commissionRate:         { type: 'number'},      
            deployFee:              { type: 'number'}, 
            deployAccess:           { type: 'string'},
            addJobFee:              { type: 'number'},
            maxTotalPayment:        { type: 'number'},
            maxConcurrentJobs:      { type: 'number'},
            maxConcurrentWorkers:   { type: 'number'},
            maxConcurrentSandboxes: { type: 'number'},
            maxConcurrentCPUs:      { type: 'number'},
            maxConcurrentGPUs:      { type: 'number'},
            maxConcurrentEscrow:    { type: 'number'},
          }).check((argv) => {
            if ((argv.joinKey && argv.joinSecret) || (argv.joinKey && argv.joinHash) || (argv.id && argv.joinAddress)) {
              return true;
            }
            throw new Error('"create" command should be provided with t least one of these pairs {joinKey, joinSecret}, {joinKey, joinHash} or {id, joinAddress}.');
          }),
      wrapAPICall((argv) =>
      
        createGroup(
          {
            joinSecret: argv.joinSecret,
            joinKey: argv.joinKey,
            joinHash:argv.joinHash,
            id: argv.id,
            joinAddress: argv.joinAddress
          },
          argv.name,
          argv.description,
          {
          commissionRate: argv.commissionRate,
          deployFee: argv.deployFee,
          deployAccess: argv.deployAccess,
          addJobFee: argv.addJobFee,
          maxTotalPayment: argv.maxTotalPayment,
          maxConcurrentJobs: argv.maxConcurrentJobs,
          maxConcurrentWorkers: argv.maxConcurrentWorkers,
          maxConcurrentSandboxes: argv.maxConcurrentSandboxes,
          maxConcurrentCPUs: argv.maxConcurrentCPUs,
          maxConcurrentGPUs: argv.maxConcurrentGPUs,
          maxConcurrentEscrow: argv.maxConcurrentEscrow,
        }),
      ),
    )
    .command(
      'change [options]',
      'Change a compute group',
      (yargs) =>
        yargs
          .options({
            id:                     { type: 'string' },
            joinKey:                { type: 'string' },

            name:                   { type: 'string' },
            description:            { type: 'string' },
            joinHash:               { type: 'string'},    
            joinAddress:            { type: 'string'},   
            commissionRate:         { type: 'number'},      
            deployFee:              { type: 'number'}, 
            deployAccess:           { type: 'string'},
            addJobFee:              { type: 'number'},
            maxTotalPayment:        { type: 'number'},
            maxConcurrentJobs:      { type: 'number'},
            maxConcurrentWorkers:   { type: 'number'},
            maxConcurrentSandboxes: { type: 'number'},
            maxConcurrentCPUs:      { type: 'number'},
            maxConcurrentGPUs:      { type: 'number'},
            maxConcurrentEscrow:    { type: 'number'},
          }).check((argv) => {
            if (argv.joinKey || argv.id ) {
              return true;
            }
            throw new Error('"change" command should be provided with either joinKey or id.');
          }),
      wrapAPICall((argv) =>
        changeGroup(
        {id: argv.id, joinKey: argv.joinKey},
         {
          name: argv.name,
          description: argv.description,
          joinHash: argv.joinHash,
          joinAddress: argv.joinAddress,
          commissionRate: argv.commissionRate,
          deployFee: argv.deployFee,
          deployAccess: argv.deployAccess,
          addJobFee: argv.addJobFee,
          maxTotalPayment: argv.maxTotalPayment,
          maxConcurrentJobs: argv.maxConcurrentJobs,
          maxConcurrentWorkers: argv.maxConcurrentWorkers,
          maxConcurrentSandboxes: argv.maxConcurrentSandboxes,
          maxConcurrentCPUs: argv.maxConcurrentCPUs,
          maxConcurrentGPUs: argv.maxConcurrentGPUs,
          maxConcurrentEscrow: argv.maxConcurrentEscrow,
        }),
      ),
    )
    .command(
      'delete [options]',
      'Delete a compute group',
      (yargs) =>
        yargs.options({
          id:                     { type: 'string' },
          joinKey:                { type: 'string' },
        }).check((argv) => {
          if (argv.joinKey || argv.id ) {
            return true;
          }
          throw new Error('"delete" command should be provided with either joinKey or id.');
        }),
      wrapAPICall((argv) => deleteGroup({id: argv.id, joinKey: argv.joinKey})),
    )
    .command(
      'listJobs [options]',
      'List jobs in a compute group.',
      (yargs) =>
      yargs.options({
        id:           { type: 'string'},  
        joinKey:      { type: 'string'},
      }).check((argv) => {
        if (argv.joinKey || argv.id ) {
          return true;
        }
        throw new Error('"listJobs" command should be provided with either joinKey or id.');
      }),
      wrapAPICall(argv =>
        listJobs({
          id: argv.id,
          joinKey: argv.joinKey,
          }
        )
      )
    )
    .command(
      'removeJob <job> [options]',
      'Remove a job in a compute group.',
      (yargs) =>
      yargs
      .positional('job', {
        type: 'string',
        description: 'The job address to be removed from the compute group',
      })
      .options({
        id:           { type: 'string'},  
        joinKey:      { type: 'string'},
      }).check((argv) => {
        if (argv.joinKey || argv.id ) {
          return true;
        }
        throw new Error('"removeJob" command should be provided with either joinKey or id.');
      }),
      wrapAPICall(argv =>
        removeJob(argv.job, {
          id: argv.id,
          joinKey: argv.joinKey,
          }
        )
      )
    )
    .command(
      'removeAllJobs [options]',
      'Remove all jobs in a compute group.',
      (yargs) =>
      yargs.options({
        id:           { type: 'string'},  
        joinKey:      { type: 'string'},
      }).check((argv) => {
        if (argv.joinKey || argv.id ) {
          return true;
        }
        throw new Error('"removeAllJobs" command should be provided with either joinKey or id.');
      }),
      wrapAPICall(argv =>
        listJobs({
          id: argv.id,
          joinKey: argv.joinKey,
          }
        )
      )
    ).options({
        json: {
          alias: 'j',
          type: 'boolean',
          default: false,
          describe: 'Show the output in JSON format',
        },
        debug: {
          alias: 'd',
          type: 'boolean',
          default: false,
          describe: 'Show debugging information',
        },
      })
    .command(
      'hash {joinKey} {joinSecret}',
      'Calculate a joinHash',
      (yargs) => yargs
        .positional('joinKey', {
          description: 'The group\'s joinKey',
          type: 'string',
        })
        .positional('joinSecret', {
          description: 'The group\'s joinSecret',
          type: 'string',
        })
        .option('verbose', {
          description: 'Provide verbose output',
          alias: 'v',
          type: 'boolean',
          default: false,
        }),
      joinHash
    )
    .demandCommand(1, 'A command must be specified')
    .strict()
    .parse();
}

/**
 *  Calculate the joinHash for a given joinKey and joinSecret
 *
 *  @param  {string} options.joinKey    The group's joinKey
 *  @param  {string} options.joinSecret The group's joinSecret, in cleartext
 *  @return {string}                    The calculates joinHash
 */
function joinHash({ joinKey, joinSecret, verbose })
{
  const { calculateJoinHash } = require('dcp/compute-groups');

  const joinHash = calculateJoinHash({ joinKey, joinSecret });

  if (verbose)
  {
    console.debug('calculate hash:');
    console.debug('joinKey:    ', joinKey);
    console.debug('joinSecret: ', joinSecret);
    console.debug('joinHash:   ', joinHash);
  }
  else
  {
    console.log(joinHash);
  }
  return joinHash;
}

initDCPClient()
  .then(main)
  .catch((e) => {
    console.error('Failed to execute command:');
    console.error(e);
    process.exit(1);
  });
