# @file    .gitlab-ci.yml - Configures the GitLab CI pipeline for the project.
#
# @author  Bryan Hoang <bryan@distributive.network>
# @author  Eddie Roosenmallen <eddie@distributive.network>
# @date    Jan. 2021

# Default job properties.
default:
  # Use in-house runners.
  tags:
    - dcp
    - linux
  cache: &default-cache
    - key:
        prefix: $CI_COMMIT_REF_SLUG
        files:
          - package-lock.json
      paths:
        - node_modules

variables:
  # Can only cache files in the current build directory.
  npm_config_cache: .cache/npm/
  # Suppress funding & audit messages.
  npm_config_fund: 'false'

stages:
  - build
  - test
  - deploy

build:
  stage: build
  # Has an npm version w/ `lockfileVersion` 3.
  image: node:20
  cache:
    # Prevent overriding the persistence of node_modules for jobs in later
    # stages.
    - *default-cache
    # Make clean install's on the same branch faster.
    - key:
        prefix: $CI_COMMIT_REF_SLUG
        files:
          - package-lock.json
      paths:
        - $npm_config_cache
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install
      openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work without
    ## extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace
    ## gitlab.com with your own domain name. You can copy and repeat that
    ## command if you have more than one server to connect to.
    ##
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ## Prevent an error due to insecure permissions on client config:
    - chmod -R o-w /builds/Distributed-Compute-Protocol/dcp-util/
    - chmod o-w /builds/Distributed-Compute-Protocol
    - chmod o-w /builds

  script:
    # install instead of ci to take advantage of caching node_modules
    - npm clean-install

tidelift:
  stage: build
  variables:
    # This should be kept in a GitLab Variable. Read more:
    # https://docs.gitlab.com/ee/ci/variables/#create-a-custom-variable-in-the-ui
    TIDELIFT_API_KEY: $TIDELIFT_API_KEY
  # The Tidelift CLI requires `glibc`.
  image: frolvlad/alpine-glibc
  before_script:
    - apk add --no-cache curl
    - echo "Downloading Tidelift CLI"
    - curl https://download.tidelift.com/cli/tidelift -o tidelift
    - echo "Setting permissions"
    - chmod +x tidelift
  script:
    - echo "Running alignment and saving to Tidelift"
    - ./tidelift alignment save --wait
  cache: []

test:
  stage: test
  # Test against multiple versions of node.
  parallel:
    matrix:
      - NODE_IMAGE: 
        - node:18
        - node:20
  image: $NODE_IMAGE
  before_script:
    # Setting this as a `variable` breaks npm, making it unable to find scripts
    # under `node_modules/.bin` for whatever reason. e.g. `peter: not found`
    # 
    # Setting this DEBUG variable changes peter's behaviour in unexpected
    # ways, including making the assorted xxx-utility programs emit help text
    # on stderr when no command is passed, which peter interprets as an
    # INTERNAL ERROR and a failed test. ~ER2022-05-30
    # 
    # - export DEBUG=tests
    # 
    # Prevent an error due to insecure permissions on client config:
    - chmod -R o-w /builds/Distributed-Compute-Protocol/dcp-util/
    - chmod o-w /builds/Distributed-Compute-Protocol
    - chmod o-w /builds
    # Make a random id keystore for testing so that job-utility doesn't throw
    - mkdir ~/.dcp
    - node bin/mkad new id -p ""
  script:
    - npm test

publish_docs:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - catalog-info.yaml
        - docs/mkdocs.yml
        - docs/*.md
  variables:
    AWS_ACCESS_KEY_ID: $BACKSTAGE_ACCESS_KEY
    AWS_SECRET_ACCESS_KEY: $BACKSTAGE_ACCESS_SECRET
    AWS_DEFAULT_REGION: 'us-east-1'
    AWS_REGION: 'us-east-1'
  stage: deploy
  needs: []
  # Refer to https://github.com/nikolaik/docker-python-nodejs#-tags
  image: nikolaik/python-nodejs:python3.11-nodejs18-slim
  script:
    - npm install -g @techdocs/cli
    - pip install mkdocs mkdocs-techdocs-core==1.*  mkdocs-same-dir
    - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && chmod a+x /usr/local/bin/yq
    - ./publish-docs.sh
